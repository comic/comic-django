# Default COMIC settings, to be included by settings.py
# To overwrite these settings local-only, please add a file XX-local.conf.py in the same dir
# and make XX higher then 00


DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)



# Sjoerd: used as starting points for various other paths.
# realpath(__file__) starts in the "Comic" app dir. We need to 
# go one dir higher so path.join("..")
SITE_ROOT = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

MANAGERS = ADMINS

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        #'NAME': os.path.join(SITE_ROOT,"sqlite.db"),  # Or path to database file if using sqlite3.
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'comic',
        'USER': 'comic',                     # Not used with sqlite3.
        'PASSWORD': 'django',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

EMAIL_HOST = 'localhost'
EMAIL_PORT = 25
DEFAULT_FROM_EMAIL = 'noreply@comicframework.org'

ANONYMOUS_USER_ID = -1

AUTH_PROFILE_MODULE = 'profiles.UserProfile'
USERENA_USE_HTTPS = False
LOGIN_URL = '/accounts/signin/'
LOGOUT_URL = '/accounts/signout/'
LOGIN_REDIRECT_URL = '/accounts/%(username)s/'
#SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/accounts/profile/'
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/accounts/profile/edit/'
#SOCIAL_AUTH_NEW_ASSOCIATION_REDIRECT_URL = '/accounts/profile/edit/'

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
#TIME_ZONE = 'America/Chicago'
TIME_ZONE = None

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
# FIXME: put site source root here for testing purposes. This should be a real data drive 
MEDIA_ROOT = os.path.join(SITE_ROOT,"static/media") 


# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = ''

# Dirictory to write rendered graph images for example. Files which are
# public but not really static. FIXME: is this in the right place?
CACHE_ROOT = os.path.join(SITE_ROOT,"cache")

# root synched folder for dropbox. Tags like include_file read from this.
# Should contain a folder for each project, e.g. /VESSEL12 /ANODE09
DROPBOX_ROOT = "/srv/home/comicftp/Dropbox/comicframework/"


# In each project there can be a single directory out of which files can be downloaded
# without logging in. In this folder you can put website header images etc.
# for security, only MEDIA_ROOT/<project_name>/COMIC_PUBLIC_FOLDER_NAME are served 
# without checking credentials. 
COMIC_PUBLIC_FOLDER_NAME = "public_html"

# In each project there can be a single directory from which files can only be
# downloaded by registered memebers of that project
# TODO: Do not hardcode these dirs but make editable in admin interface. See # 
COMIC_REGISTERED_ONLY_FOLDER_NAME = "datasets"


# the name of the main project: this project is shown when url is loaded without
# arguments, and pages in this project appear as menu items throughout the site 
MAIN_PROJECT_NAME = "comic"

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"

# Serve files using django (debug only) 
STATIC_URL = '/static/'
# serve files from sjoerds local webserver
# STATIC_URL = 'http://localhost/django/Comic/'

# Additional locations of static files
STATICFILES_DIRS = (                    
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    
    SITE_ROOT+"/"+"static",
    #"D:/userdata/Sjoerd/Aptana Studio 3 Workspace/comic-django/django/Static",
    
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'd=%^l=xa02an9jn-$!*hy1)5yox$a-$2(ejt-2smimh=j4%8*b'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.app_directories.Loader',
    'django.template.loaders.filesystem.Loader',
    
#     'django.template.loaders.eggs.Loader',
)


TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.request',
    'django.core.context_processors.static',
    'django.core.context_processors.request',
    'django.contrib.messages.context_processors.messages',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'comic.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'comic.wsgi.application'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.

    # FIXME: Path to template path. This might be temporary.
    # At the moment some of the admin templates are overloaded here. I think the comicsite app is a better place to do that.
    os.path.normpath(os.path.dirname(__file__) + '/templates'),
    
    
)

INSTALLED_APPS = (
    'django.contrib.auth',    
    'django.contrib.contenttypes',
    'django.contrib.sessions',    
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Needed for userena
    'django.contrib.sites',    
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    # all objects used in the framework, e.g. algorithm, dataset, team, result. 
    'comicmodels',
    # comicsite is the where main web portal of this framework lives
    'comicsite',
    # placed admin below comicsite to be able to override standard admin templates
    'django.contrib.admin',
    # profiles extends userena and gives functionality to manage user profiles
    # profiles needs to be loaded before userena
    'profiles',
    # South provides schema and data migrations
    'south',
    # userena provides advanced user management
    'userena',
    # guardian (depency of userena) implements advanced authentication on a per object basis
    'guardian',
    # easy-thumbnails (depency of userena) is a thumbnailing application
    'easy_thumbnails',    
    # social-auth provides authentication via social accounts using openid and oauth2
    'social_auth',
    # MeVisLab Visualisation through the browser. see https://github.com/comic/comic-django/issues/10
    'mevislab_visualisation',
    # provides abstraction layer for file upload/download  
    'filetransfers',
    # use dropbox files in projects
    'django_dropbox',
    # html WYSIWYG editor
    'ckeditor'
    
)

AUTHENTICATION_BACKENDS = (
    'social_auth.backends.twitter.TwitterBackend',
    'social_auth.backends.facebook.FacebookBackend',
    'social_auth.backends.google.GoogleOAuthBackend',
    'social_auth.backends.google.GoogleOAuth2Backend',
    'social_auth.backends.google.GoogleBackend',
    'social_auth.backends.yahoo.YahooBackend',
    'social_auth.backends.browserid.BrowserIDBackend',
    'social_auth.backends.contrib.linkedin.LinkedinBackend',
    'social_auth.backends.contrib.livejournal.LiveJournalBackend',
    'social_auth.backends.contrib.orkut.OrkutBackend',
    'social_auth.backends.contrib.foursquare.FoursquareBackend',
    'social_auth.backends.contrib.github.GithubBackend',
    'social_auth.backends.contrib.dropbox.DropboxBackend',
    'social_auth.backends.contrib.flickr.FlickrBackend',
    'social_auth.backends.contrib.instagram.InstagramBackend',
    #'social_auth.backends.contrib.vkontakte.VkontakteBackend',
    'social_auth.backends.contrib.skyrock.SkyrockBackend',
    'social_auth.backends.contrib.yahoo.YahooOAuthBackend',
    'social_auth.backends.OpenIDBackend',
    'social_auth.backends.contrib.bitbucket.BitbucketBackend',
    'social_auth.backends.contrib.live.LiveBackend',
    'django.contrib.auth.backends.ModelBackend',
    'userena.backends.UserenaAuthenticationBackend',
    'guardian.backends.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
)

TWITTER_CONSUMER_KEY         = ''
TWITTER_CONSUMER_SECRET      = ''
FACEBOOK_APP_ID              = ''
FACEBOOK_API_SECRET          = ''
LINKEDIN_CONSUMER_KEY        = ''
LINKEDIN_CONSUMER_SECRET     = ''
ORKUT_CONSUMER_KEY           = ''
ORKUT_CONSUMER_SECRET        = ''
GOOGLE_CONSUMER_KEY          = ''
GOOGLE_CONSUMER_SECRET       = ''
GOOGLE_OAUTH2_CLIENT_ID      = ''
GOOGLE_OAUTH2_CLIENT_SECRET  = ''
FOURSQUARE_CONSUMER_KEY      = ''
FOURSQUARE_CONSUMER_SECRET   = ''
GITHUB_APP_ID                = ''
GITHUB_API_SECRET            = ''
DROPBOX_APP_ID               = ''
DROPBOX_API_SECRET           = ''
FLICKR_APP_ID                = ''
FLICKR_API_SECRET            = ''
INSTAGRAM_CLIENT_ID          = ''
INSTAGRAM_CLIENT_SECRET      = ''
#VK_APP_ID                    = ''
#VK_API_SECRET                = ''
BITBUCKET_CONSUMER_KEY       = ''
BITBUCKET_CONSUMER_SECRET    = ''
LIVE_CLIENT_ID               = ''
LIVE_CLIENT_SECRET           = ''
SKYROCK_CONSUMER_KEY         = ''
SKYROCK_CONSUMER_SECRET      = ''
YAHOO_CONSUMER_KEY           = ''
YAHOO_CONSUMER_SECRET        = ''

#SOCIAL_AUTH_PIPELINE = (
#        'social_auth.backends.pipeline.social.social_auth_user',
#        'social_auth.backends.pipeline.associate.associate_by_email',
#        'social_auth.backends.pipeline.get_username',
#        'social_auth.backends.pipeline.user.create_user',
#        #'profile.social_auth.pipeline.create_profile',
#        #'profile.social_auth.pipeline.set_guardian_permissions',
#        #'profile.social_auth.pipeline.userena_signup',
#        'social_auth.backends.pipeline.social.associate_user',
#        'social_auth.backends.pipeline.social.load_extra_data',
#        'social_auth.backends.pipeline.user.update_user_details'
#        )
SOCIAL_AUTH_PIPELINE = (
        'social_auth.backends.pipeline.social.social_auth_user',
        #'social_auth.backends.pipeline.associate.associate_by_email',
        'social_auth.backends.pipeline.user.get_username',
        #'profiles.social_auth.pipeline.user.get_username',
        'social_auth.backends.pipeline.user.create_user',
        'profiles.social_auth.pipeline.profile.create_profile',
        'profiles.social_auth.pipeline.profile.set_guardian_permissions',
        'social_auth.backends.pipeline.social.associate_user',
        'social_auth.backends.pipeline.social.load_extra_data',
        'social_auth.backends.pipeline.user.update_user_details',
)

SOCIAL_AUTH_COMPLETE_URL_NAME  = 'socialauth_complete'
SOCIAL_AUTH_ASSOCIATE_URL_NAME = 'socialauth_associate_complete'
SOCIAL_AUTH_EXPIRATION = 'expires'
SOCIAL_AUTH_RAISE_EXCEPTIONS = DEBUG
SOCIAL_AUTH_ASSOCIATE_BY_MAIL = True
#SOCIAL_AUTH_USER_MODEL = 'auth.User'

# For running tests, make sure south runs all migrations for each test
# This implicitly tests the migration from clean install, and makes sure the
# test database is as up to date as possible without becoming stale, which
# would happen if we would not migrate, but use a snapshot of the database
# for testing.  
SOUTH_TESTS_MIGRATE = True


# buttons for WYSIWYG editor in page admin
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': [
            [ 
                   'Source',
              '-', 'Undo', 'Redo',
              '-', 'Bold', 'Italic', 'Underline','Format',
              '-', 'Link', 'Unlink', 'Anchor',              
              '-', 'Table','BulletedList', 'NumberedList','Image','SpecialChar',
              '-', 'Maximize',              
              
            ]
        ],
        'width': 840,
        'height': 300,
        'toolbarCanCollapse': False,
        'entities': False,
    }
}



# A sample logging configuration. More info in configuration can be found at 
# https://docs.djangoproject.com/en/dev/topics/logging/ . 
# This configuration writes WARNING and worse errors to an error log file, and
# sends an email to all admins. It also writes INFO logmessages and worse to a 
# regular log file.   
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {      
            'filters': ['require_debug_false'],                  
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter' : 'verbose',
            'level': 'WARNING'
        },
        'write_to_logfile' : {            
            'class' : 'logging.FileHandler',
            'filename' : "C:/temp/django_log.txt",
            'formatter' : 'verbose',
            'level': 'INFO'                   
        },
         'write_to_error_logfile' : {            
            'class' : 'logging.FileHandler',
            'filename' : "C:/temp/django_error_log.txt",
            'formatter' : 'verbose',
            'level': 'WARNING'                    
        }
    },
    'loggers': {
        'django': {
            'handlers': ['mail_admins','write_to_logfile','write_to_error_logfile'],        
            'propagate': True,
        },
                
    }
}